{% set version = "2.0.15" %}
{% set name = "pywinpty" %}

package:
  name: {{ name }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: 312cf39153a8736c617d45ce8b6ad6cd2107de121df91c455b10ce6bba7a39b2

build:
  number: 0
  skip: true  # [(not win) or py<39]
  script: 
    - {{ PYTHON }} -m pip install . -vv --no-deps --no-build-isolation
    - cargo-bundle-licenses --format yaml --output "{{ SRC_DIR }}\THIRDPARTY.yml"

requirements:
  build:
    - {{ compiler('rust') }}
    - {{ compiler('cxx') }}
    - cargo-bundle-licenses
  host:
    - python
    - pip
    - maturin >=1.1,<2.0
    - winpty 0.4.3
  run:
    - python
    - {{ pin_compatible('winpty') }}

test:
  source_files:
    - winpty/tests
    - runtests.py
  imports:
    - winpty
  requires:
    - pip
    - python
    - pytest
    - flaky
  commands:
    - pip check
    # test_read - issues with encoding
    - python -m runtests -k "not test_read"


about:
  home: https://github.com/spyder-ide/pywinpty
  license: MIT
  license_file: 
    - LICENSE.txt
    - THIRDPARTY.yml
  license_family: MIT
  summary: Pseudoterminals for Windows in Python
  description: |
    PyWinpty allows creating and communicating with Windows processes that
    receive input and print outputs via console input and output pipes.
    PyWinpty supports both the native ConPTY interface and the previous,
    fallback winpty library.
  doc_url: https://github.com/spyder-ide/pywinpty
  dev_url: https://github.com/spyder-ide/pywinpty

extra:
  recipe-maintainers:
    - blink1073
    - ccordoba12
    - andfoy
    - ocefpaf
